// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator prisma {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount", "fullTextIndex"]
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model EnrollHistory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  date       DateTime? @default(now())
  courseName String
  price      String
  uid        String
  user       User      @relation(fields: [uid], references: [uid])
  batchId    String    @db.ObjectId
  batch      Batch     @relation(fields: [batchId], references: [id])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  uid           String    @unique
  name          String
  email         String?   @default("")
  mobile        String    @unique
  dob           DateTime? @default(now())
  gender        String?   @default("")
  pic_url       String?   @default("https://0x0.st/onc6.jpg")
  pincode       Int?      @default(0)
  schoolName    String    @default("")
  board         String
  studentClass  String
  studentStream String?   @default("")
  pro           Boolean?  @default(false)
  language      String    @default("Hindi")
  district      String?   @default("")
  rollCode      String?
  rollNo        String?
  isScholarship Boolean?  @default(false)
  fcm_token     String?
  target        String[]

  doubts             Doubt[]
  enrollHistory      EnrollHistory[]
  testHistory        TestHistory[]
  allRatings         Rating[]
  CustomNotification CustomNotification[]
  Inquiry            Inquiry[]
  Comments           Comment[]
  batchIds           String[]             @db.ObjectId
  batches            Batch[]              @relation(fields: [batchIds], references: [id])
}

model TestHistory {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  testId           String    @db.ObjectId
  test             Test      @relation(fields: [testId], references: [id])
  uid              String
  user             User      @relation(fields: [uid], references: [uid])
  date             DateTime? @default(now())
  userResponses    Int[]
  correctResponses Int[]
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

model Question {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  chapter         String[]
  options         String[]
  details         String
  correctOption   Int
  explanation     String?
  image           String?
  tags            String[]
  subject         String
  questionClass   String
  createdBy       String          @default("")
  difficultyLevel DifficultyLevel @default(EASY)
  testIds         String[]        @db.ObjectId
  tests           Test[]          @relation(fields: [testIds], references: [id])

  @@fulltext([details])
}

model Test {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  instructions String[]      @default(["एक प्रकार का नमूना किताब बनाने के लिए इसे तले हुए।", "एक प्रकार का नमूना किताब बनाने के लिए इसे तले हुए।", "एक प्रकार का नमूना किताब बनाने के लिए इसे तले हुए।"])
  rating       Float?        @default(3.0)
  testClass    String
  board        String
  subject      String
  totalMarks   Int           @default(100)
  paid         Boolean       @default(false)
  passingMarks Int           @default(40)
  dailyTest    Boolean?      @default(false)
  date         DateTime?     @default(now())
  chapterId    String        @db.ObjectId
  chapter      Chapter       @relation(fields: [chapterId], references: [id])
  questionIds  String[]      @db.ObjectId
  questions    Question[]    @relation(fields: [questionIds], references: [id])
  testHistory  TestHistory[]
  allRatings   Rating[]

  @@index(fields: [date(sort: Desc)])
}

model Video {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  url         String
  tags        String[]
  rating      Float?    @default(3.0)
  videoClass  String
  board       String
  subject     String
  paid        Boolean   @default(false)
  createdAt   DateTime? @default(now())
  chapterId   String?   @db.ObjectId
  chapter     Chapter?  @relation(fields: [chapterId], references: [id])
  batchIds    String[]  @db.ObjectId
  Batch       Batch[]   @relation(fields: [batchIds], references: [id])

  Comments Comment[]

  @@index(fields: [createdAt(sort: Desc)])
  @@fulltext([title])
}

model Chapter {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  logo          String?  @default("https://0x0.st/oncE.jpg")
  class         String
  subject       String
  board         String
  freeTestCount Int      @default(1)
  testIds       String[] @db.ObjectId
  tests         Test[]
  videoIds      String[] @db.ObjectId
  videos        Video[]

  @@index([subject, class, board])
  @@fulltext([name])
}

model Rating {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  testId   String?   @db.ObjectId
  test     Test?     @relation(fields: [testId], references: [id])
  uid      String
  user     User      @relation(fields: [uid], references: [uid])
  date     DateTime? @default(now())
  response Float     @default(4)
}

model DailyTips {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  date    DateTime? @default(now())
  videoId String
  header  String
  bgcolor String?
  imgUrl  String
}

model Doubt {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  doubtText   String
  doubtPic    String?
  solution    String?
  solutionPic String?
  date        DateTime? @default(now())
  resolved    Boolean?  @default(false)
  uid         String
  user        User      @relation(fields: [uid], references: [uid])
}

model Micellaneous {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  phone            String?
  whatsAppNumber   String?
  videoIdParesani  String?
  videoIdUsage     String?
  mentorTitle      String?
  mentorPic        String?
  mentorName       String?
  mentorPhone      String?
  mentorWhatsApp   String?
  mentorAbout      String?
  mentorHeading    String?
  price            String?
  upiPic           String?
  upiId            String?
  upiUrl           String?
  paymentNo2       String?
  paymentRefNumber String?
}

model Notification {
  id    String    @id @default(auto()) @map("_id") @db.ObjectId
  title String
  body  String
  date  DateTime? @default(now())

  @@index([date])
}

model CustomNotification {
  id    String    @id @default(auto()) @map("_id") @db.ObjectId
  title String
  body  String
  date  DateTime? @default(now())
  uid   String
  user  User      @relation(fields: [uid], references: [uid])

  @@index([date])
}

model Inquiry {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  text String
  uid  String
  user User   @relation(fields: [uid], references: [uid])
}

model Comment {
  id    String    @id @default(auto()) @map("_id") @db.ObjectId
  text  String
  vid   String    @db.ObjectId
  video Video     @relation(fields: [vid], references: [id])
  uid   String
  user  User      @relation(fields: [uid], references: [uid])
  date  DateTime? @default(now())
}

model Batch {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  picUrl          String
  title           String
  description     String
  batchCode       String          @unique
  class           String
  subject         String
  board           String
  teachers        String[]
  price           Int
  startDate       DateTime?
  endDate         DateTime?
  createdAt       DateTime?       @default(now())
  userIds         String[]        @db.ObjectId
  users           User[]          @relation(fields: [userIds], references: [id])
  videoIds        String[]        @db.ObjectId
  videos          Video[]         @relation(fields: [videoIds], references: [id])
  enrollHistories EnrollHistory[]

  @@index(fields: [createdAt(sort: Desc)])
}
